#!/bin/sh
#
# ZFT Lab. 2018 | http://zftlab.org/pages/2018010700.html
# Simple Plugin - Telegram Bot


IPC=/mnt/mtd/ipcam.conf
TMP=/var/tmp


if [ -f ${IPC} ]; then
  while read settings
    do local ${settings}
  done < ${IPC}

  api="https://api.telegram.org/bot$telegram_token"
  offset_file=/var/tmp/telegram_offset

  if [ ${socks5_enable} = 1 ]; then
    curl_options="-s -k --socks5-hostname ${socks5_server}:${socks5_port} --proxy-user ${socks5_login}:${socks5_password}"
  else
    curl_options="-s -k"
  fi

  sleep 5
  keyboard='{"keyboard": [["/snap \uD83D\uDCF7","/guard \uD83D\uDC6E","/relay \uD83D\uDCA1"],["/system \uD83D\uDCCA","/reboot \uD83D\uDCA9","/menu \uD83D\uDD25"],["/user1 \uD83D\uDDDD","/user2 \uD83D\uDDDD","/user3 \uD83D\uDDDD"]],"resize_keyboard":true,"one_time_keyboard":false}'
  curl ${curl_options} -X POST -H "Charset: UTF-8" $api/sendMessage -d chat_id=${telegram_group} -d parse_mode=Markdown --data-urlencode text="IPCam telegram bot started." >/dev/null 2>&1
  curl ${curl_options} -X POST -H "Charset: UTF-8" $api/sendMessage -d chat_id=${telegram_group} -d "reply_markup=${keyboard}" -d "text=Please insert command:" >/dev/null 2>&1

  polling_timeout=30
  offset=0
  if [ -f "$offset_file" ]; then
    offset=$( cat $offset_file )
  else
    echo $offset > $offset_file
  fi

  reply_to_msg () {
    msg_id=$1
    origin=$2
    eval toReturn="$3"
    curl ${curl_options} -X POST -H "Charset: UTF-8" $api/sendMessage -d reply_to_message_id=$msg_id -d chat_id=$origin -d parse_mode=HTML --data-urlencode text="$toReturn" >/dev/null 2>&1
  }

  while [ true ]
  do
    updates=$(curl ${curl_options} -X GET ${api}/getUpdates?offset=${offset}&timeout=${polling_timeout})
    status=$(jsonfilter -s "$updates" -e $.ok)
    if [ $status = 'true' ]; then
      update_ids=$(jsonfilter -s "$updates" -e $.result[*].update_id)
      for update_id in $update_ids
      do
        offset=$((update_id+1))
        echo $offset > $offset_file
        origin=$(jsonfilter -s "$updates"  -e "$.result[@.update_id=$update_id].message.chat.id")
        msg_id=$(jsonfilter -s "$updates"  -e "$.result[@.update_id=$update_id].message.message_id")
        command=$(jsonfilter -s "$updates" -e "$.result[@.update_id=$update_id].message.text")
        is_a_cmd=$(jsonfilter -s "$updates" -e "$.result[@.update_id=$update_id].message.entities[*].type")
        query_ans=$(jsonfilter -s "$updates" -e "$.result[@.update_id=$update_id].callback_query.id")
        origin_ans=$(jsonfilter -s "$updates"  -e "$.result[@.update_id=$update_id].callback_query.message.chat.id")
        if [[ "$origin" != "$telegram_group" && "$origin_ans" != "$telegram_group" ]];then
          curl ${curl_options} -X POST -H "Charset: UTF-8" $api/sendMessage -d reply_to_message_id=$msg_id -d chat_id=$origin -d parse_mode=Markdown --data-urlencode text="This is a Private bot." >/dev/null 2>&1
          curl ${curl_options} -X POST $api/leaveChat -d chat_id=$origin >/dev/null 2>&1
        else
          if [ "$is_a_cmd" ==  "bot_command" ]; then
            cmd=$(echo $command |  awk '{print $1}')
            export TZ=${time_zone}
            DATE="$(date '+%G.%m.%d_%H:%M:%S')"
            case "$cmd" in
              ("/guard")
                echo "[ $DATE ] Run /guard command !" | logger -t "telegram_bot" -p daemon.info
                informex_guard=$("tg_guard.sh")
                reply_to_msg $msg_id $origin "\${informex_guard}"
                ;;
              ("/menu")
                echo "[ $DATE ] Run /menu command !" | logger -t "telegram_bot" -p daemon.info
                curl ${curl_options} -X POST -H "Charset: UTF-8" $api/sendMessage -d chat_id=$telegram_group -d "reply_markup=${keyboard}" -d "text=Please insert command:" >/dev/null 2>&1
                ;;
              ("/reboot")
                echo "[ $DATE ] Run /reboot command !" | logger -t "telegram_bot" -p daemon.info
                informex_reboot=$("tg_reboot.sh")
                reply_to_msg $msg_id $origin "\${informex_reboot}"
                ;;
              ("/relay")
                echo "[ $DATE ] Run /relay command !" | logger -t "telegram_bot" -p daemon.info
                informex_relay=$("tg_relay.sh")
                reply_to_msg $msg_id $origin "\${informex_relay}"
                ;;
              ("/snap")
                echo "[ $DATE ] Run /snap command !" | logger -t "telegram_bot" -p daemon.info
                informex_system=$("tg_snap.sh")
                reply_to_msg $msg_id $origin "\${informex_system}"
                ;;
              ("/system")
                echo "[ $DATE ] Run /system command !" | logger -t "telegram_bot" -p daemon.info
                informex_system=$("tg_system.sh")
                reply_to_msg $msg_id $origin "\${informex_system}"
                ;;
              ("/user1")
                echo "[ $DATE ] Run /user1 command !" | logger -t "telegram_bot" -p daemon.info
                informex_user1=$("/mnt/mtd/tg_user1.sh")
                reply_to_msg $msg_id $origin "\${informex_user1}"
                ;;
              ("/user2")
                echo "[ $DATE ] Run /user2 command !" | logger -t "telegram_bot" -p daemon.info
                informex_user2=$("/mnt/mtd/tg_user2.sh")
                reply_to_msg $msg_id $origin "\${informex_user2}"
                ;;
              ("/user3")
                echo "[ $DATE ] Run /user3 command !" | logger -t "telegram_bot" -p daemon.info
                informex_user3=$("/mnt/mtd/tg_user3.sh")
                reply_to_msg $msg_id $origin "\${informex_user3}"
                ;;
              (*)
                echo "[ $DATE ] $cmd command not enabled" | logger -t "telegram_bot" -p daemon.info
                informex_unknown="This command is not enabled."
                reply_to_msg $msg_id $origin "\${informex_unknown}"
                ;;
            esac
          #else
          # curl ${curl_options} -X POST -H "Charset: UTF-8" $api/sendMessage -d reply_to_message_id=$msg_id -d chat_id=$origin -d parse_mode=Markdown --data-urlencode text="Is not a command." >/dev/null 2>&1
          fi
        fi
      done
        fi
    sleep 1
  done

fi

